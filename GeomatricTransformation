import pygame
from pygame.locals import *
from OpenGL.GL import *
from OpenGL.GLU import *

pygame.init()
display = (800,600)
pygame.display.set_mode(display, DOUBLEBUF|OPENGL)

pygame.display.set_caption("04_LAB_1_ABLERO")
glEnable(GL_DEPTH_TEST)

gluPerspective(45, (display[0]/display[1]), 0.1, 50.0)
glTranslatef(0,0,-5)

vertices = (
    (1, 1, 1),
    (1, 1, -1),
    (1, -1, -1),
    (1, -1, 1),
    (-1, 1, 1),
    (-1, -1, -1),
    (-1, -1, 1),
    (-1, 1, -1) )

edges = (
    (0,1,2),
    (0,2,3),
    (0,4,6),
    (0,3,6),
    (0,1,4),
    (1,4,7),
    (1,2,5),
    (1,5,7),
    (5,6,7),
    (4,6,7),
    (2,3,6),
    (5,6,2))

colors = [(1, 0, 0),
          (1, 1, 0),
          (0, 1, 0),
          (0, 1, 1),
          (0, 0, 1),
          (1, 0, 1)]

rotation_speed = 1
scale_factor = 1

def draw_3DCube():
    glBegin(GL_TRIANGLES)
    for edgeIndex, edge in enumerate(edges):
        glColor3fv(colors[edgeIndex // 2])
        for index in edge:
            glVertex3fv(vertices[index])
    glEnd()

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            quit()
        if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_w:
                    glTranslatef(-1, 0, 0)
                elif event.key == pygame.K_a:
                    glTranslatef(-1, 0, 0)
                elif event.key == pygame.K_s:
                    glTranslatef(0, 1, 0)
                elif event.key == pygame.K_d:
                    glTranslatef(0, -1, 0)
                elif event.key == pygame.K_UP:
                    rotation_speed += 0.2
                elif event.key == pygame.K_DOWN:
                    rotation_speed -= 0.2
                elif event.key == pygame.K_RIGHT:
                    rotation_speed += 0.1
                elif event.key == pygame.K_LEFT:
                   rotation_speed -= 0.1
                elif event.key == pygame.K_SPACE:
                    scale_factor += 0.1

    glRotatef(rotation_speed, 1, 1, 1)
    glScalef(scale_factor, scale_factor, scale_factor)
    glClear(GL_COLOR_BUFFER_BIT|GL_DEPTH_BUFFER_BIT)
    draw_3DCube()
    pygame.display.flip()
    pygame.time.wait(10)
